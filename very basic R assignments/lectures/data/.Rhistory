} else {
stop("Bad segment data type: ", segVarType[j])
}
}
}
library(tidyverse)
# Names of the variables we will define for each segment (=CustomerType)
#    Original: "age",        "gender",           "income",           "kids",             "ownHome",           "subscribe"   ==> "Segment"
segVars <- c("NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast")
# the data type for each segment
#-----------------------------------------------------------------------------------------------------------
# We use
#   binom: für categorical Werte, z.B. Geschlecht, Vertrag ja/nein
#   norm:  für normal continous Werte, z.B. Umsatz, Alter
#   pois:  für continous Werte, welche deren Verteilung eine Verschiebung zu niedrigen Werten hat, z.B. Anzahl Kinder
#-----------------------------------------------------------------------------------------------------------
segVarType <- c("norm", "binom", "norm", "norm", "pois", "binom")
# names of the segments
segNames <- c("Innovator", "EarlyAdopter", "EarlyMajority", "MatureMajority")
# the size of each segment (N)
segSize <- c(30, 50, 100, 100)
# the means for each variable for each segment
segMeans <- matrix( c(
# "NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast"
# "norm", "binom", "norm", "norm", "pois", "binom"
30,   	.2, 	55, 	27, 	5.90, 	.90,
50,   	.3, 	41, 	56, 	6.88, 	.85,
100,  	.9, 	22, 	178, 	.30,  	.20,
100, 		.12, 	16, 	180, 	.33,  	.20  ), ncol=length(segVars), byrow=TRUE)
# the standard deviations for each segment (NA = not applicable for the variable)
segSDs <- matrix( c(
5, NA, 7.5, 12.2, NA, NA,
2, NA, 7.0, 10.2, NA, NA,
8, NA, 3.0, 32.3, NA, NA,
4, NA, 2.0, 34.9, NA, NA  ), ncol=length(segVars), byrow=TRUE)
#Test the distributions with plots
funcPlot(1);
funcPlot(2);
funcPlot(3);
funcPlot(4);
# make sure we're starting our dataset from a known state
seg.df <- NULL
set.seed(02554)
# iterate over all the segments and create data for each
for (i in seq_along(segNames)) {
cat(i, segNames[i], "\n")
# create an empty matrix to hold this particular segment's data
this.seg <- data.frame(matrix(NA, nrow=segSize[i], ncol=length(segVars)))
# within a segment, iterate over the variables and draw appropriate random data
for (j in seq_along(segVars)) {    # and iterate over each variable
if (segVarType[j] == "norm") {   # draw random normals
this.seg[, j] <- rnorm(segSize[i], mean=segMeans[i, j], sd=segSDs[i, j])
} else if (segVarType[j] == "pois") {    # draw counts
this.seg[, j] <- rpois(segSize[i], lambda=segMeans[i, j])
} else if (segVarType[j] == "binom") {   # draw binomials
this.seg[, j] <- rbinom(segSize[i], size=1, prob=segMeans[i, j])
} else {
stop("Bad segment data type: ", segVarType[j])
}
}
# add this segment to the total dataset
seg.df <- rbind(seg.df, this.seg)
}
# make the data frame names match what we defined
names(seg.df) <- segVars
# add segment membership for each row
seg.df$CustomerType   <- factor(rep(segNames, times=segSize))
#Round variables
seg.df$NoSupportCalls <- round(seg.df$NoSupportCalls ,0)
seg.df$TimeFirstContact <- round(seg.df$TimeFirstContact ,0)
#Ranking in "AcceptErrorsRanking"
MinRank <- min(seg.df$AcceptErrorsRanking)
MaxRank <- max(seg.df$AcceptErrorsRanking)
NewMaxRank <- 5   # Ranking von 0 bis 5
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking / MaxRank  #Normierung
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking * NewMaxRank
seg.df$AcceptErrorsRanking <- round(seg.df$AcceptErrorsRanking, 0)
# convert the binomial variables to nicely labeled factors
seg.df$HasSupportContract    <- factor(seg.df$HasSupportContract, labels=c("no", "yes"))
seg.df$WantProductFast <- factor(seg.df$WantProductFast, labels=c("no", "yes"))
# check the data and confirm it
glimpse(seg.df)
summary(seg.df)
plot(seg.df$AcceptErrorsRanking)
seg.df %>% filter(CustomerType =="Innovator") %>% summary()
seg.df %>% filter(CustomerType =="Innovator") %>% summary() %>% plot()
seg.df %>% filter(CustomerType =="Innovator") %>%  plot()
seg.df %>% filter(CustomerType =="Innovator") %>%  plot(AcceptErrorsRanking) #summary() %>%
seg.df %>% filter(CustomerType =="Innovator") %>%  plot(seg.df$AcceptErrorsRanking) #summary() %>%
seg.df %>% filter(CustomerType =="Innovator") %>%  summary()
seg.df %>% filter(CustomerType =="EarlyAdopter") %>% summary()
seg.df %>% filter(CustomerType =="EarlyMajority") %>% summary()
seg.df %>% filter(CustomerType =="MatureMajority") %>% summary()
funcPlot <- function(i) {
cat("Plot: ", i, segNames[i], "\n")
cat("---------------------------------------------------\n")
par(mfrow=(c(3,2)), pin=c(1, 1), cex=0.5,pch=16)
for (j in seq_along(segVars)) {    # and iterate over each variable
meanVal = segMeans[i, j];
byVal = (segMeans[i, j] / 200);
cat(segVars[j],"  DIST:", segVarType[j],">>> MEAN:",meanVal,"   SD:",segSDs[i, j], "\n")
if (segVarType[j] == "norm") {   # draw random normals
x <− seq(0.1, (2 * meanVal), by=byVal)
plot(x, dnorm(x, mean=segMeans[i, j], sd = segSDs[i, j]), col="red", type="l", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else if (segVarType[j] == "pois") {    # draw counts
x <− seq(0.0, 5, by=0.01)
plot(x, dpois(x, lambda=segMeans[i, j]), type="l", col="red", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else if (segVarType[j] == "binom") {   # draw binomials
x <− seq(0.0, 5, by=0.01)
plot(x, dbinom(x, size=1, prob=segMeans[i, j]), type="l", col="red", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else {
stop("Bad segment data type: ", segVarType[j])
}
}
}
library(tidyverse)
# Names of the variables we will define for each segment (=CustomerType)
#    Original: "age",        "gender",           "income",           "kids",             "ownHome",           "subscribe"   ==> "Segment"
segVars <- c("NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast")
# the data type for each segment
#-----------------------------------------------------------------------------------------------------------
# We use
#   binom: für categorical Werte, z.B. Geschlecht, Vertrag ja/nein
#   norm:  für normal continous Werte, z.B. Umsatz, Alter
#   pois:  für continous Werte, welche deren Verteilung eine Verschiebung zu niedrigen Werten hat, z.B. Anzahl Kinder
#-----------------------------------------------------------------------------------------------------------
segVarType <- c("norm", "binom", "norm", "norm", "pois", "binom")
# names of the segments
segNames <- c("Innovator", "EarlyAdopter", "EarlyMajority", "MatureMajority")
# the size of each segment (N)
segSize <- c(30, 50, 100, 100)
# the means for each variable for each segment
segMeans <- matrix( c(
# "NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast"
# "norm", "binom", "norm", "norm", "pois", "binom"
30,   	.2, 	55, 	27, 	5.90, 	.90,
50,   	.3, 	41, 	56, 	6.88, 	.85,
100,  	.9, 	22, 	178, 	.30,  	.20,
100, 		.12, 	16, 	180, 	.33,  	.20  ), ncol=length(segVars), byrow=TRUE)
# the standard deviations for each segment (NA = not applicable for the variable)
segSDs <- matrix( c(
5, NA, 7.5, 12.2, NA, NA,
2, NA, 7.0, 10.2, NA, NA,
8, NA, 3.0, 32.3, NA, NA,
4, NA, 2.0, 34.9, NA, NA  ), ncol=length(segVars), byrow=TRUE)
#Test the distributions with plots
funcPlot(1);
funcPlot(2);
funcPlot(3);
funcPlot(4);
# make sure we're starting our dataset from a known state
seg.df <- NULL
set.seed(02554)
# iterate over all the segments and create data for each
for (i in seq_along(segNames)) {
cat(i, segNames[i], "\n")
# create an empty matrix to hold this particular segment's data
this.seg <- data.frame(matrix(NA, nrow=segSize[i], ncol=length(segVars)))
# within a segment, iterate over the variables and draw appropriate random data
for (j in seq_along(segVars)) {    # and iterate over each variable
if (segVarType[j] == "norm") {   # draw random normals
this.seg[, j] <- rnorm(segSize[i], mean=segMeans[i, j], sd=segSDs[i, j])
} else if (segVarType[j] == "pois") {    # draw counts
this.seg[, j] <- rpois(segSize[i], lambda=segMeans[i, j])
} else if (segVarType[j] == "binom") {   # draw binomials
this.seg[, j] <- rbinom(segSize[i], size=1, prob=segMeans[i, j])
} else {
stop("Bad segment data type: ", segVarType[j])
}
}
# add this segment to the total dataset
seg.df <- rbind(seg.df, this.seg)
}
# make the data frame names match what we defined
names(seg.df) <- segVars
# add segment membership for each row
seg.df$CustomerType   <- factor(rep(segNames, times=segSize))
#Round variables
seg.df$NoSupportCalls <- round(seg.df$NoSupportCalls ,0)
seg.df$TimeFirstContact <- round(seg.df$TimeFirstContact ,0)
#Ranking in "AcceptErrorsRanking"
MinRank <- min(seg.df$AcceptErrorsRanking)
MaxRank <- max(seg.df$AcceptErrorsRanking)
NewMaxRank <- 5   # Ranking von 0 bis 5
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking / MaxRank  #Normierung
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking * NewMaxRank
seg.df$AcceptErrorsRanking <- round(seg.df$AcceptErrorsRanking, 0)
# convert the binomial variables to nicely labeled factors
seg.df$HasSupportContract    <- factor(seg.df$HasSupportContract, labels=c("no", "yes"))
seg.df$WantProductFast <- factor(seg.df$WantProductFast, labels=c("no", "yes"))
# check the data and confirm it
glimpse(seg.df)
summary(seg.df)
write.csv(LeadUserData1, file = "c:/tmp/DiffusionData1.csv",row.names=FALSE)
write.csv(seg.df, file = "c:/tmp/DiffusionData1.csv",row.names=FALSE)
funcPlot <- function(i) {
cat("Plot: ", i, segNames[i], "\n")
cat("---------------------------------------------------\n")
par(mfrow=(c(3,2)), pin=c(1, 1), cex=0.5,pch=16)
for (j in seq_along(segVars)) {    # and iterate over each variable
meanVal = segMeans[i, j];
byVal = (segMeans[i, j] / 200);
cat(segVars[j],"  DIST:", segVarType[j],">>> MEAN:",meanVal,"   SD:",segSDs[i, j], "\n")
if (segVarType[j] == "norm") {   # draw random normals
x <− seq(0.1, (2 * meanVal), by=byVal)
plot(x, dnorm(x, mean=segMeans[i, j], sd = segSDs[i, j]), col="red", type="l", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else if (segVarType[j] == "pois") {    # draw counts
x <− seq(0.0, 5, by=0.01)
plot(x, dpois(x, lambda=segMeans[i, j]), type="l", col="red", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else if (segVarType[j] == "binom") {   # draw binomials
x <− seq(0.0, 5, by=0.01)
plot(x, dbinom(x, size=1, prob=segMeans[i, j]), type="l", col="red", xlab="x", ylab="f(x)", main=c(segVars[j]))
} else {
stop("Bad segment data type: ", segVarType[j])
}
}
}
library(tidyverse)
# Names of the variables we will define for each segment (=CustomerType)
#    Original: "age",        "gender",           "income",           "kids",             "ownHome",           "subscribe"   ==> "Segment"
segVars <- c("NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast")
# the data type for each segment
#-----------------------------------------------------------------------------------------------------------
# We use
#   binom: für categorical Werte, z.B. Geschlecht, Vertrag ja/nein
#   norm:  für normal continous Werte, z.B. Umsatz, Alter
#   pois:  für continous Werte, welche deren Verteilung eine Verschiebung zu niedrigen Werten hat, z.B. Anzahl Kinder
#-----------------------------------------------------------------------------------------------------------
segVarType <- c("norm", "binom", "norm", "norm", "pois", "binom")
# names of the segments
segNames <- c("Innovator", "EarlyAdopter", "EarlyMajority", "MatureMajority")
# the size of each segment (N)
segSize <- c(30, 50, 100, 100)
# the means for each variable for each segment
segMeans <- matrix( c(
# "NoEmplo", "HasSupportContract", "NoSupportCalls", "TimeFirstContact", "AcceptErrorsRanking", "WantProductFast"
# "norm", "binom", "norm", "norm", "pois", "binom"
30,   	.2, 	55, 	27, 	5.90, 	.90,
50,   	.3, 	41, 	56, 	6.88, 	.85,
100,  	.9, 	22, 	178, 	.30,  	.20,
100, 		.12, 	16, 	180, 	.33,  	.20  ), ncol=length(segVars), byrow=TRUE)
# the standard deviations for each segment (NA = not applicable for the variable)
segSDs <- matrix( c(
5, NA, 7.5, 12.2, NA, NA,
2, NA, 7.0, 10.2, NA, NA,
8, NA, 3.0, 32.3, NA, NA,
4, NA, 2.0, 34.9, NA, NA  ), ncol=length(segVars), byrow=TRUE)
#Test the distributions with plots
funcPlot(1);
funcPlot(2);
funcPlot(3);
funcPlot(4);
# make sure we're starting our dataset from a known state
seg.df <- NULL
set.seed(02554)
# iterate over all the segments and create data for each
for (i in seq_along(segNames)) {
cat(i, segNames[i], "\n")
# create an empty matrix to hold this particular segment's data
this.seg <- data.frame(matrix(NA, nrow=segSize[i], ncol=length(segVars)))
# within a segment, iterate over the variables and draw appropriate random data
for (j in seq_along(segVars)) {    # and iterate over each variable
if (segVarType[j] == "norm") {   # draw random normals
this.seg[, j] <- rnorm(segSize[i], mean=segMeans[i, j], sd=segSDs[i, j])
} else if (segVarType[j] == "pois") {    # draw counts
this.seg[, j] <- rpois(segSize[i], lambda=segMeans[i, j])
} else if (segVarType[j] == "binom") {   # draw binomials
this.seg[, j] <- rbinom(segSize[i], size=1, prob=segMeans[i, j])
} else {
stop("Bad segment data type: ", segVarType[j])
}
}
# add this segment to the total dataset
seg.df <- rbind(seg.df, this.seg)
}
# make the data frame names match what we defined
names(seg.df) <- segVars
# add segment membership for each row
seg.df$CustomerType   <- factor(rep(segNames, times=segSize))
#Round variables
seg.df$NoSupportCalls <- round(seg.df$NoSupportCalls ,0)
seg.df$TimeFirstContact <- round(seg.df$TimeFirstContact ,0)
#Ranking in "AcceptErrorsRanking"
MinRank <- min(seg.df$AcceptErrorsRanking)
MaxRank <- max(seg.df$AcceptErrorsRanking)
NewMaxRank <- 5   # Ranking von 0 bis 5
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking / MaxRank  #Normierung
seg.df$AcceptErrorsRanking <- seg.df$AcceptErrorsRanking * NewMaxRank
seg.df$AcceptErrorsRanking <- round(seg.df$AcceptErrorsRanking, 0)
# convert the binomial variables to nicely labeled factors
seg.df$HasSupportContract    <- factor(seg.df$HasSupportContract, labels=c("no", "yes"))
seg.df$WantProductFast <- factor(seg.df$WantProductFast, labels=c("no", "yes"))
#Randomly mix rows in data
seg.df <- seg.df[sample(nrow(seg.df)),]
# check the data and confirm it
glimpse(seg.df)
summary(seg.df)
#"Innovator", "EarlyAdopter", "EarlyMajority", "MatureMajority"
seg.df %>% filter(CustomerType =="Innovator") %>%  summary()
seg.df %>% filter(CustomerType =="EarlyAdopter") %>% summary()
seg.df %>% filter(CustomerType =="EarlyMajority") %>% summary()
seg.df %>% filter(CustomerType =="MatureMajority") %>% summary()
write.csv(seg.df, file = "c:/tmp/DiffusionData1.csv",row.names=FALSE)
library(tidyverse)
foo <- function(i) {
return (sqrt(i))
}
maxVal <- 5
for (i in 1:maxVal)
{
notree <- 10 * i
#cat("\n------------ntree:",notree,"\n")
y <- foo(notree)
y
}
foo <- function(i) {
return (sqrt(i))
}
maxVal <- 5
for (i in 1:maxVal)
{
notree <- 10 * i
#cat("\n------------ntree:",notree,"\n")
y <- foo(notree)
y
}
foo <- function(i) {
return (sqrt(i))
}
maxVal <- 5
for (i in 1:maxVal)
{
notree <- 10 * i
cat("\n------------ntree:",notree,"\n")
y <- foo(notree)
y
}
foo <- function(i) {
return (sqrt(i))
}
maxVal <- 5
for (i in 1:maxVal)
{
notree <- 10 * i
cat("\n------------ntree:",notree,"\n")
y <- foo(notree)
cat("y:",y,"\n")
}
x <- seq(1, 208)
cat("x :\n")
x
zVec <- sample(x,50)
zVec
{x}
t <- TRUE
if (t) { x }
log(199/200)
log(4/2)
-0.4 / -6.6
x = 0.3 -0.7
y = 2(0.7*(1-0.7))
y = 2(0.7*(1-0.7)))
y = 2*(0.7*(1-0.7))
y
x/y
x
y2 = (0.7*(1-0.7))
y2
p = 0.6931
(p * (1 - p))
log(4/2)
log(2/2)
log(200/199)
exp(0.1)
library(tidyverse)
fit1 <- lm(Sepal.Length ~ Sepal.Width, data=iris)
fit2 <- lm(Sepal.Length ~ Petal.Width, data=iris)
fit3 <- lm(Sepal.Length ~ Petal.Width, data=iris)
x <- list(fit1)
x <- list(x, fit2)
x <- list(x, fit3)
str(x, max.level=1)
x <- list(fit1)
str(x)
x <- list(x, fit2)
str(x)
x <- list(x, fit3)
str(x)
x <- list(fit1)
str(x, max.level=1)
x <- list(x, fit2)
str(x, max.level=1)
x <- list(x, fit3)
str(x, max.level=1)
x <- list(fit1,fit2, fit3)
str(x, max.level=1)
class(x)
names(x)
x[1]
x[2]
glimpse(iris)
fit1 <- lm(Sepal.Length ~ Sepal.Width, data=iris)
fit2 <- lm(Sepal.Length ~ Petal.Width, data=iris)
fit2 <- lm(Sepal.Length ~ Petal.Length, data=iris)
x <- c(0,0,0)
x[1] <- list(fit1)
x[2] <- list(fit2)
x[3] <- list(fit3)
str(x, max.level=1)
str(x[1], max.level=1)
str(x[2], max.level=1)
str(x[3], max.level=1)
x[1]
x[2]
x[3]
#set working directory
path <- "C:/HDM-Unterlagen/Vorlesung HDM/Vorlesung R for ML (Master)/V o r l e s u n g e n (R4ML)/O r i g i n a l e (ANALYTICS)/data"
setwd(path)
EComData1 <- read.csv(file="EComData-L1_tidy.csv", header=TRUE, sep=",")
mean.online_spend <- mean(EComData1$online_spend)
#cat("mean of online_spend:",mean.online_spend,"\n")
EComData1 <- EComData1 %>%
select(-id, -online_trans) %>%               #Remove not important columns
filter(email == "yes" | email == "no") %>%   #Only use real factors
drop_na() %>%                                #Remove missing values
filter(online_spend > 0) %>%
mutate(High = as.factor(ifelse(online_spend <= mean.online_spend, "Fail","Succ"))) %>%
rename(Class = High) %>%
select(-online_spend) %>%
select(Class, everything())           #'online_spend' as first column
DataFrame <- EComData1
#----------------- Fast Feature Engineering ---------------
library(mlbench)
library(caret)
library(caTools)
library(tidyverse)
glimpse(DataFrame)
library(tidyverse)
#set working directory
path <- "C:/HDM-Unterlagen/Vorlesung HDM/Vorlesung R for ML (Master)/V o r l e s u n g e n (R4ML)/O r i g i n a l e (ANALYTICS)/data"
setwd(path)
EComData1 <- read.csv(file="EComData-L1_tidy.csv", header=TRUE, sep=",")
mean.online_spend <- mean(EComData1$online_spend)
#cat("mean of online_spend:",mean.online_spend,"\n")
EComData1 <- EComData1 %>%
select(-id, -online_trans) %>%               #Remove not important columns
filter(email == "yes" | email == "no") %>%   #Only use real factors
drop_na() %>%                                #Remove missing values
filter(online_spend > 0) %>%
mutate(High = as.factor(ifelse(online_spend <= mean.online_spend, "Fail","Succ"))) %>%
rename(Class = High) %>%
select(-online_spend) %>%
select(Class, everything())           #'online_spend' as first column
DataFrame <- EComData1
#----------------- Fast Feature Engineering ---------------
library(mlbench)
library(caret)
library(caTools)
glimpse(DataFrame)
ind = createDataPartition(DataFrame$Class, p = 2/3, list = FALSE)
trainDF<-DataFrame[ind,]
testDF<-DataFrame[-ind,]
ControlParamteres <- trainControl(
method = "cv",
number = 5,
savePredictions = TRUE,
verboseIter = TRUE,
returnData = FALSE,
returnResamp = "all",                   # save losses across all models
classProbs = TRUE,                      # set to TRUE for AUC to be computed
summaryFunction = twoClassSummary,
allowParallel = TRUE
)
parametersGrid <-  expand.grid(eta = c(0.01, 0.001, 0.0001),
colsample_bytree=c(0.5,0.7),
max_depth=c(3,6),
nrounds=100,
gamma=1,
min_child_weight=2,
subsample=1
)
modelxgboost <- train(Class~.,
data = trainDF,
method = "xgbTree",
trControl = ControlParamteres,
tuneGrid = parametersGrid)
glimpse(DataFrame)
class(DataFrame)
ControlParamters <- trainControl(
method = "cv",
number = 5,
savePredictions = TRUE,
verboseIter = TRUE,
returnData = FALSE,
returnResamp = "all",                   # save losses across all models
classProbs = TRUE,                      # set to TRUE for AUC to be computed
summaryFunction = twoClassSummary,
allowParallel = TRUE
)
parametersGrid <-  expand.grid(eta = c(0.01, 0.001, 0.0001),
colsample_bytree=c(0.5,0.7),
max_depth=c(3,6),
nrounds=100,
gamma=1,
min_child_weight=2,
subsample=1
)
modelxgboost <- train(Class ~ .,
data = trainDF,
method = "xgbTree",
trControl = ControlParamters,
tuneGrid = parametersGrid)
